#!/bin/bash

# pathname.flib <Functions that work with Unix like pathnames.>
# Copyright (C) 2012  Marcelo Javier Auquer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# REQUIREMENTS: upvars.bash
#         BUGS: --
#        NOTES: Any suggestion is welcomed at auq..r@gmail.com (fill in
#               the dots).

source ~/code/bash/pathname-flib/upvars/upvars.bash

#===  FUNCTION =========================================================
#
#       USAGE: is_ancestor PATHNAME1 PATHNAME2
#
# DESCRIPTION: Consider PATHNAME1 and PATHNAME2 as the root directories
#              of two unix filesystem hierararchy trees, T1 and T2.
#              Return 0 if T2 is a subtree of T1.
#
#  PARAMETERS: PATHNAME1 (A string representing a unix pathname).
#              PATHNAME2 (A string representing a unix pathname).
#
is_ancestor () {
	OLD_IFS=$IFS
	IFS="$(printf '\n\t')"
	{
		[[ "$#" -ne 2 ]] && cat <<- EOF
		Error: function is_ancestor requires two arguments.
		EOF
	} && exit 1
	local pathname1="$(readlink -f "$1")"
	local pathname2="$(readlink -f "$2")"
	([[ "$pathname2" =~ ${pathname1}/.* ]] && return 0) || return 1
	IFS=$OLD_IFS
}


#===  FUNCTION =========================================================
#
#       USAGE: rm_subtrees VARNAME PATH...
#
# DESCRIPTION: Consider PATH... as a list of unix filesystem pathnames.
#              Delete from PATH... every pathname which has an ancestor
#              pathname in that list. Store the resulting list in an
#              array pointed by the caller's VARNAME variable.
#
#  PARAMETERS: VARNAME (A string representing a variable name inside the
#                       caller's scope).
#              PATH... (A list of strings representing unix filesystem
#                       pathnames).
#
#=======================================================================
rm_subtrees () {
	OLD_IFS=$IFS
	IFS="$(printf '\n\t')"
	{
		[[ "$#" -lt 2 ]] && cat <<- EOF
		Error: function rm_substrees requires two or more \
arguments.
		EOF
	} && exit 1
	[[ "$#" -eq 2 ]] && return 0
	local varname=$1 && shift 1
	paths=($@)
	for (( f=0 ; f < ${#paths[*]}; f++ )); do
		[ ! paths[f] ] && continue
		for (( g=f+1 ; g < ${#paths[*]}; g++ )); do
			[ ! paths[g] ] && continue
			if [ ${#paths[f]} -le ${#paths[g]} ]; then
				echo "1- ${paths[f]} ${paths[g]}"
				if is_ancestor ${paths[f]} ${paths[g]}
				then
					unset paths[$g]
				fi
			else
				echo "2- ${paths[f]} ${paths[g]}"
				if is_ancestor ${paths[g]} ${paths[f]}
				then
					unset paths[$f]
				fi
			fi
		done
	done
	upvar $varname "${paths[@]}"
	IFS=$OLD_IFS
}
